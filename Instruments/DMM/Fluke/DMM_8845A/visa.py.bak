import pyvisa

class DMMDriver:
    def __init__(self, gpib_address):
        """
        Initialisiert den Treiber mit der angegebenen GPIB-Adresse.
        
        :param gpib_address: Die GPIB-Adresse des Geräts, z. B. 'GPIB0::22::INSTR'.
        """
        self.gpib_address = gpib_address
        self.rm = pyvisa.ResourceManager()
        self.instrument = None

    def connect(self):
        """
        Stellt die Verbindung zum Gerät her. Gibt einen Hinweis, wenn das Gerät nicht erreichbar ist.
        """
        try:
            self.instrument = self.rm.open_resource(self.gpib_address)
            print(f"Verbunden mit {self.gpib_address}")
        except pyvisa.VisaIOError as e:
            if e.error_code == pyvisa.constants.StatusCode.error_timeout:
                print(f"Gerät nicht erreichbar. Bitte sicherstellen, dass das Gerät eingeschaltet und korrekt verbunden ist. (Fehler: {e})")
            else:
                print(f"Fehler beim Verbinden: {e}")

    def disconnect(self):
        """
        Trennt die Verbindung zum Gerät.
        """
        if self.instrument:
            self.instrument.close()
            print("Verbindung geschlossen.")

    def set_mode(self, mode):
        """
        Setzt den Modus des DMM (z. B. Spannung, Strom, Widerstand).
        
        :param mode: Der Modus, den das Gerät einstellen soll (z. B. 'VOLT', 'CURR', 'RES').
        """
        valid_modes = ['VOLT', 'CURR', 'RES']
        if mode not in valid_modes:
            raise ValueError(f"Ungültiger Modus: {mode}. Gültige Modi: {valid_modes}")
        
        self.instrument.write(f"FUNC '{mode}'")
        print(f"Modus auf {mode} gesetzt.")

    def read_measurement(self):
        """
        Führt eine Messung aus und gibt den gemessenen Wert zurück.
        
        :return: Gemessener Wert als Float.
        """
        try:
            value = self.instrument.query("READ?")
            print(f"Messwert: {value.strip()}")
            return float(value)
        except ValueError:
            print("Fehler beim Lesen des Messwerts.")

    def identify(self):
        """
        Fragt die Identifikation des Geräts ab.
        
        :return: Geräteinformationen als String.
        """
        idn = self.instrument.query("*IDN?")
        print(f"Geräteinfo: {idn.strip()}")
        return idn.strip()

# Beispiel für die Verwendung des Treibers
def main():
    # Ersetze 'GPIB0::22::INSTR' mit der tatsächlichen Adresse deines Geräts
    dmm = DMMDriver('GPIB0::1::INSTR')
    dmm.connect()

    try:
        dmm.identify()
        dmm.set_mode('VOLT')
        messwert = dmm.read_measurement()
        print(f"Gemessene Spannung: {messwert} V")
    finally:
        dmm.disconnect()

if __name__ == "__main__":
    main()
